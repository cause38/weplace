// === 확정 mixin === //

// font-family 세팅
@mixin fontSet($font-map) {
    @each $file-name, $value in $font-map {
        @font-face {
            font-family: map-get($value, name);
            font-style: normal;
            font-weight: map-get($value, weight);

            $format: map-get($value, format);
            $format-full: 'truetype';

            @if ($format == 'otf') {
                $format-full: 'opentype';
            }

            src: url('#{$FONT_PATH}#{$file-name}.woff2?v220225') format('woff2'),
                url('#{$FONT_PATH}#{$file-name}.woff?v220225') format('woff'),
                url('#{$FONT_PATH}#{$file-name}.#{$format}?v220225') format('#{$format-full}');
        }
    }
}

// font-family 적용
@mixin fontFamily($font-family...) {
    font-family: $font-family, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell,
        'Open Sans', 'Helvetica Neue', sans-serif;
}

// 미디어 쿼리 생성
@mixin mq($type, $width: 0px) {
    @if ($type == 'L') {
        @media (min-width: $L_SCREEN) {
            @content;
        }
    } @else if ($type == 'max-m') {
        @media (max-width: $L_SCREEN - 1) {
            @content;
        }
    } @else if ($type == 'm') {
        @media (min-width: $M_SCREEN) {
            @content;
        }
    } @else if ($type == 'only-m') {
        @media (min-width: $M_SCREEN) and (max-width: $L_SCREEN - 1) {
            @content;
        }
    } @else if ($type == 's') {
        @media (max-width: $M_SCREEN - 1) {
            @content;
        }
    } @else if ($type == 'ss') {
        @media (max-width: $S_SCREEN) {
            @content;
        }
    } @else if ($type == 'min') {
        @media (min-width: $width) {
            @content;
        }
    } @else if ($type == 'max') {
        @media (max-width: $width) {
            @content;
        }
    }
}

// 라인 수를 받아와서 라인 수가 넘어가면 text-ellips 적용되는 mixin
@mixin ellipsis($lines: 1) {
    overflow: hidden;
    text-overflow: ellipsis;

    @if ($lines == 1) {
        white-space: nowrap;
    } @else {
        display: -webkit-box;
        -webkit-line-clamp: $lines;
        -webkit-box-orient: vertical;
    }
}

// 배경이미지가 해상도에 적절한 이미지로 적용하는 mixin
// ex- bgImage('icon/cate-arrow', 'png', '2x', '3x');
@mixin bgImage(
    $file,
    $unit: 'jpg',
    $file-x: null,
    $file-2x: null,
    $size: cover,
    $position: center,
    $repeat: no-repeat
) {
    $url: '#{$IMG_PATH}#{$file}.#{$unit}';

    @if ($file-x) {
        $url: '#{$IMG_PATH}#{$file}@#{$file-x}.#{$unit}';
    }

    background: url($url) $repeat $position / $size;

    @if ($file-2x) {
        $url-2x: '#{$IMG_PATH}#{$file}@#{$file-2x}.#{$unit}';
        background-image: -webkit-image-set(url($url) 1x, url($url-2x) 2x);
        background-image: image-set(url($url) 1x, url($url-2x) 2x);
    }
}

// 공통 여백을 준 뒤 처음과 끝의 여백은 초기화
@mixin listSpacing($value, $type: 'margin') {
    #{$type}-top: $value;
    #{$type}-bottom: $value;

    &:first-of-type {
        #{$type}-top: 0;
    }
    &:last-of-type {
        #{$type}-bottom: 0;
    }
}

// ol요소에 counter속성 지정. (ol 태그에 바로 사용하면 됨)
@mixin olCounter($content: '', $counter-name: num) {
    counter-reset: $counter-name;
    li:nth-child(-n + 10)::before {
        counter-increment: $counter-name;
        content: '#{$content}'counter($counter-name);
    }
    // 10 이상부터 앞에 0붙지 않도록 지정
    li:nth-child(n + 10)::before {
        counter-increment: $counter-name;
        content: counter($counter-name);
    }
}

// === 확정 mixin 끝 === //

// 폰트관련 서식
@mixin fontStyle(
    $font-size: null,
    $line-height: null,
    $color: null,
    $letter-spacing: null,
    $font-weight: null,
    $font-family: null
) {
    font-size: $font-size;
    line-height: $line-height;
    color: $color;
    letter-spacing: $letter-spacing;
    font-weight: $font-weight;
    font-family: $font-family;
}

// innerWrap으로 감싸진 영역에서 full width 를 줄 때 사용
@mixin fullWidth($spacing-type: margin-left, $box-sizing: null) {
    width: calc(100% + calc(#{$S_SPACING}* 2));
    #{$spacing-type}: -#{$S_SPACING};
    box-sizing: $box-sizing;
}

// IE대응하는 그리드 레이아웃
@mixin gridLayout(
    $ms-row: null,
    $row-start: null,
    $ms-row-span: null,
    $row-end: null,
    $ms-column: null,
    $column-start: null,
    $ms-column-span: null,
    $column-end: null
) {
    -ms-grid-row: $ms-row;
    grid-row-start: $row-start;
    -ms-grid-row-span: $ms-row-span;
    grid-row-end: $row-end;
    -ms-grid-column: $ms-column;
    grid-column-start: $column-start;
    -ms-grid-column-span: $ms-column-span;
    grid-column-end: $column-end;
}

// position값과 width, height값을 설정하는 mixin
@mixin setPosition($position, $w: null, $h: null, $top: null, $left: null, $bottom: null, $right: null) {
    position: $position;
    width: $w;
    height: $h;
    top: $top;
    left: $left;
    bottom: $bottom;
    right: $right;
}

// position 속성을 이용해 수직, 수평 중앙 정렬하는 mixin
// TODO: 흐림 방지 문제 없는지 체크 필요
@mixin posCenter($position: absolute) {
    position: $position;
    top: 50%;
    left: 50%;
    transform: translate(calc(-50% + 0.5px), calc(-50% + 0.5px)); // 흐림 방지
    // width나 height이 잡혀있을 때 흐리면 width, height을 홀수로 값을 바꿔줘야됨
}

// border 스타일을 지정하는 mixin
@mixin border($size: null, $color: null, $radius: null, $type: solid, $box: border-box) {
    border-width: $size;
    border-color: $color;
    border-radius: $radius;
    border-style: $type;
    box-sizing: $box;
}

// flex 속성을 지정하는 mixin
@mixin flex($wrap: null, $jus: null, $align: null, $gap: null, $dir: null) {
    display: flex;
    flex-wrap: $wrap;
    justify-content: $jus;
    align-items: $align;
    flex-direction: $dir;
    gap: $gap;
}

// inline-block 속성을 사용할 때 align, box-sizing을 자동으로 설정하는 mixin
@mixin inBlock($align: middle) {
    display: inline-block;
    vertical-align: $align;
}

// absolute 속성으로 background image cover 속성과 유사하게 설정하는 mixin
@mixin abCover() {
    position: absolute;
    min-width: 100%;
    min-height: 100%;
    box-sizing: border-box;
    left: 50%;
    top: 50%;
    transform: translate(calc(-50% + 0.5px), calc(-50% + 0.5px));
}

// sudo 선택자 기본값 세팅
@mixin sudoSet(
    $content: '',
    $position: null,
    $top: null,
    $left: null,
    $bottom: null,
    $right: null,
    $display: block,
    $width: null,
    $height: null,
    $vertical: null
) {
    content: $content;
    display: $display;
    width: $width;
    height: $height;
    vertical-align: $vertical;
    position: $position;
    top: $top;
    left: $left;
    bottom: $bottom;
    right: $right;
}

// overflow hidden을 지정하는 mixin
@mixin overHide($w: null, $h: null) {
    overflow: hidden;
    width: $w;
    height: $h;
}
